Command = require('../Command')

class Iterator extends Command
  type: 'Iterator'

  signature: [
    collection: ['Query', 'Selector'],
    body: ['Any']
  ]

  List: true

  # Capture commands generated by css rule block
  yield: (result, engine, operation, continuation, scope) ->
    if operation.parent.indexOf(operation) == 1
      contd = @delimit(continuation, @DESCEND)
      op = operation.parent[2]
      op.command.solve engine, op, contd, result
      return true

  # Only evaluate first argument when going top down
  descend: (engine, operation, continuation, scope, ascender, ascending) ->
    argument = operation[1]
    command = argument.command || engine.Command(argument)
    argument.parent ||= operation

    command.solve(operation.domain || engine, argument, continuation, scope)
    return false


Iterator.define
  # CSS rule

  "rule":
    index: 'rules'

    advices: [
      (engine, operation, command) ->
        parent = operation
        while parent.parent
          parent = parent.parent
        operation.index = parent.rules = (parent.rules || 0) + 1
        return
    ]
  "each": {}

module.exports = Iterator
